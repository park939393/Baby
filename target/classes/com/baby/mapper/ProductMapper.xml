<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.baby.mapper.ProductMapper">


<!-- criteria(검색조건) -->
	<sql id="criteria">

	  	<trim prefix="where (" suffix=")" prefixOverrides="AND">
	  		<foreach item="type" collection="typeArr">
	  			<trim prefix="AND">
	  				<choose>
	  					<when test="type == 'B'.toString()">
	  						<trim prefixOverrides="or">
			  					<foreach collection="brandArr" item="brandId">
			  						<trim prefix="or">
			  							a.brandId = #{brandId}
			  						</trim>
			  					</foreach>  						
	  						</trim>
	  					</when>
	  					<when test="type == 'C'.toString()">
	  						a.cateCode like concat ('%', #{cateCode}, '%')
	  					</when>  					
	  					<when test="type == 'T'.toString()">
	  						productName like concat ('%', #{keyword}, '%')
	  					</when>  					
	  				</choose>
	  			</trim>
	  		</foreach>
	  	</trim>
	
	</sql>

<!-- 상품검색 -->
<select id="getProductList" resultType="com.baby.model.ProductVO">

	select productId, productName, b.brandName, a.brandId, c.cateName, a.cateCode, company, releaseDate, productPrice, productDiscount
	from baby_product a left outer join baby_brand b on a.brandId = b.brandId
	left outer join baby_pcate c on a.cateCode = c.cateCode
	<include refid="criteria"></include>
	order by productId desc
	limit #{skip}, #{amount}

</select>

<!-- 상품 총 개수 -->
<select id="productGetTotal" resultType="int">

		select count(*) from baby_product a
  		
		<include refid="criteria"></include>
	

</select>

<!-- 브랜드 id 리스트 요청 -->
	<select id="getBrandIdList" resultType="String">
	
		select brandId from baby_brand where brandName like concat ('%', #{keyword}, '%')
	
	</select>
	
<!-- 국내 카테고리 리스트 -->
	<select id="getCateCode1" resultType="com.baby.model.CateVO">
	
		<![CDATA[
			select * from baby_pcate where cateCode > 100000 and cateCode < 200000
		]]>
	</select>
	
	<!-- 외국 카테고리 리스트 -->
	<select id="getCateCode2" resultType="com.baby.model.CateVO">
	
		<![CDATA[
			select * from baby_pcate where cateCode > 200000 and cateCode < 300000
		]]>
	
	</select>	
	
	<!-- 검색 대상 카테고리 리스트 -->	
	<select id="getCateList" resultType="String">
	
		select distinct cateCode from baby_product where 
		<foreach item="type" collection="typeArr">		
  				<choose>
  					<when test="type == 'B'.toString()">
  						<trim prefixOverrides="or">
		  					<foreach collection="brandArr" item="brandId">
		  						<trim prefix="or">
		  							brandId = #{brandId}
		  						</trim>
		  					</foreach>  						
  						</trim>
  					</when>
  					<when test="type == 'T'.toString()">
  						productName like concat ('%', #{keyword}, '%')
  					</when>  					
  				</choose>
  		</foreach>
	
	</select>
<!-- 카테고리 정보(+검색대상 갯수) -->		
	<select id="getCateInfo" resultType="com.baby.model.CateFilterDTO">
	
		select DISTINCT count(*) cateCount, a.cateCode,b.cateName from baby_product a left join baby_pcate b on a.cateCode = b.cateCode 
		
		where 

		<foreach item="type" collection="typeArr">		
  				<choose>
  					<when test="type == 'B'.toString()">
  					
  						<trim prefix="(" suffix=")" prefixOverrides="or">
  						
		  					<foreach collection="brandArr" item="brandId">
		  					
		  						<trim prefix="or">
		  						
		  							brandId = #{brandId}
		  							
		  						</trim>
		  						
		  					</foreach>
		  					  						
  						</trim>
  						
  						and a.cateCode = #{cateCode}
  						
  					</when>
  					
  					<when test="type == 'T'.toString()">
  					
  						productName like concat ('%', #{keyword}, '%') and a.cateCode = #{cateCode}
  						 
  					</when>
  					  					
  				</choose>
  		</foreach>
	
	</select>
	
	<!-- 상품 정보 -->
	<select id="getProductInfo" resultType="com.baby.model.ProductVO">
	
			select a.PRODUCTID, a.PRODUCTNAME, a.BRANDID, b.BRANDNAME, a.RELEASEDATE, a.COMPANY, a.CATECODE, c.CATENAME, a.PRODUCTPRICE, a.PRODUCTSTOCK, a.PRODUCTDISCOUNT, a.PRODUCTINTRO, a.PRODUCTCONTENTS
			from baby_product a left outer join baby_brand b on a.brandId = b.brandId
			left outer join baby_pcate c on a.catecode = c.catecode
			where productid = ${productId}	
	
	</select>
	
	<select id="getProductIdName" resultType="com.baby.model.ProductVO">
	
		select productId, productName from baby_product 
		where productId = #{productId}
	
	
	</select>
	
	<select id="likeSelect" resultType="com.baby.model.SelectDTO">
	
	select productId, productName, ratingAvg, (select cateName from baby_pcate where baby_product.cateCode = baby_pcate.cateCode) as cateName
	from baby_product
	order by ratingAvg desc limit 8		
	
	</select>
	
	<select id="newSelect" resultType="com.baby.model.SelectDTO">
	
	select productId, productName, ratingAvg, (select cateName from baby_pcate where baby_product.cateCode = baby_pcate.cateCode) as cateName
	from baby_product
	order by productId desc limit 8		
	
	</select>

</mapper>